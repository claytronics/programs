/* computes the shortest path between 'finalnode' and 'startnode' */
   
type linear path(node, int, int).
type route edge(node, node, int).

priority path/2 @asc.

const finalnode = @4.
const startnode = @1.
const used = 1.
const notused = 0.

!edge(@1, @2, 1).
!edge(@2, @4, 3).
!edge(@2, @3, 1).
!edge(@3, @4, 2).

path(finalnode, 0, 0).

path(A, B, used), path(A, B, notused)
	-o path(A, B, used).

path(A, B1, X), path(A, B2, Y), B1 <= B2
   -o path(A, B1, X).

path(A, D, notused), A <> startnode
   -o {B, W | !edge(B, A, W) | path(B, D + W, notused)}, path(A, D, used).

