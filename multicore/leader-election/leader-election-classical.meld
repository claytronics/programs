/* Leader election using only non-linear rules */
/* Authors: S. Goldstein and J. Bourgeois */
/* Hypothesis: All nodes have an unique ID */
/* (cl-meld:meld-compile "/home/bourgeois/programs/leader-election/leader-election-classical.meld" "/home/bourgeois/programs/leader-election/leader-election-classical") */

/* Status: Working */

type route edge(node, node).
type leader(node, max int).
type is-leader(node, int).

/* Definition of a random topology */
!edge(@1, @2). !edge(@1, @3). !edge(@1, @4).
!edge(@2, @1). !edge(@2, @5).
!edge(@3, @1). !edge(@3, @5).
!edge(@4, @1). !edge(@4, @6).
!edge(@5, @2). !edge(@5, @3). !edge(@5, @7).
!edge(@6, @4). !edge(@6, @7).
!edge(@7, @5). !edge(@7, @6).

!leader(X, node2int(X)).

!edge(S, T), !leader(T, N), N > node2int(S) -o !leader(S, N), !is-leader(S, N).
!is-leader(S, N), N = node2int(S) -o setcolor(S, 255,0,0).