/* Hirschberg and Sinclair (HS) algorithm for leader election in a ring */
/* Hypothesis: Each process has a unique UID, bidirectionnal ring */
/* Uses classical logic */
/* Author: J. Bourgeois */
/* (cl-meld:meld-compile "/home/bourgeois/programs/BlinkyBlocks/leader-election/HS-leader-election-classical-j.meld" "/home/bourgeois/programs/BlinkyBlocks/leader-election/HS-leader-election-classical-j") */

/* Status: Compiling for BB -> Not tested yet, Working for multicore*/  

type route neighbor(node, node, int).
type route opposite(node, node, node).
type phase(node, int).
type propagated(node, int).
type route election(node, node, int, int, int).
type route reply(node, node, int, int).
type reply-nbr(node, int).
type route leader-is(node, node, int).
type init(node, int).


/* Used to obtain the opposite direction in the ring */
!neighbor(A, B, _),!neighbor(A, C, _), B <> C -o 
!opposite(A, B, C), !opposite(A, C, B).

/* Phase(0) triggers the beginning of the algorithm */
!phase(A, 0).
!propagated(A, 0).
!reply-nbr(A, 0).

/* An election message is sent to the neighbors */
!phase(A, 0), J = node2int(A) -o {B,C | !neighbor(A, B, C) | !election(B, A, J, 0, 0)}, !phase(A,1).

/* While d<2^k, election message is propagated */
!election(A, B, J, K, D),
J > node2int(A), P = intpower(2, K),
D < P, !opposite(A, B, C)
   -o !election(C, A, J, K, D + 1).  

/* If we reached d=2^k, stop election and send back reply */
!election(A, B, J, K, D), J > node2int(A), P = intpower(2, K), D >= P
   -o !reply(B, A, J, K).

/* If j=node2int(A) then I'm the leader */
!election(A, B, J, K, D), J = node2int(A)
   -o setcolor(A, 255, 0 , 0),
      {B1,C | !neighbor(A, B1, C) | !leader-is(B1, A, J)}.

/* If I receive a reply which is not for me, I forward it */
!reply(A, B, J, K), J <> node2int(A), J >= 0, !opposite(A, B, C)
  -o !reply(C, A, J, K), !reply(A, B, -1, 0).

/* If I receive a reply which is for me, and it's the first one, I do nothing */
  !reply(A, B, J, K), J = node2int(A), !reply-nbr(A, 0) -o !reply-nbr(A, 1), !reply(A, B, -1, 0).

/* If I receive a second reply, I set another round of election because, I'm a local leader */
!reply(A, B, J, K), J = node2int(A),
!reply-nbr(A, 1),
!phase(A, X),
K = X
  -o !reply(A, B, -1, 0), !reply-nbr(A, 0), !phase(A, X + 1), {B1,C | !neighbor(A, B1, C) | !election(B1, A, J, X + 1, 1)}.

/* Propagate the leader status */
  !leader-is(A, B, ID), !opposite(A, B, C), !propagated(A, NB), NB = 0, ID <> node2int(A) -o setcolor(A, 0,0,0), !leader-is(C, A, ID), !propagated(A, 1).

