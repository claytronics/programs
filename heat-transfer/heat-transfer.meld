
include #heat-data.meld

type inbound(node, int).
type linear countinbound(node).
type linear heat(node, float).
type linear heatchanged(node, float, float).
type linear neighborchanged(node, node, float, float, float).
type linear delta(node, float, float).
type linear acc(node, float, int).
type linear count(node, int).
type coord(node, int, int).
type inner(node).

const epsilon = str2float(@arg1).
const delta = str2float(@arg2).

fun fabs(float X) : float = if X >= 0.0 then 1 * X else -1.0 * X end.

heatchanged(A, 0.0, 0.0).
delta(A, 0.0, 0.0).
acc(A, 0.0, 0).
count(A, 0).
countinbound(A).

countinbound(A) -o
   [ count => X | B, W | !edge(B, A, W) | !inbound(A, if X = 0 then 1 else X end) ].

/* neighbor heat has changed... we add this to delta + acc */
neighborchanged(A, B, V, O, _),
delta(A, P1, P2),
acc(A, Diff, T),
!edge(B, A, W)
   -o delta(A, P1 + V * W, P2 + O * W), acc(A, Diff + fabs(V * W - O * W), T + 1).

/* we changed our heat, send this information to neighbors */
heatchanged(A, O, X),
heat(A, V),
fabs(X) > delta, 
!inbound(A, T)
   -o heat(A, V),
      {B, W | !edge(A, B, W) | add-priority(B, fabs(X) / delta),
      neighborchanged(B, A, V / float(T), O / float(T), fabs(((V * W) / float(T)) - ((O * W) / float(T))))}.

/* ... same thing, except delta was not big enough to change priority */
heatchanged(A, O, X), heat(A, V), !inbound(A, T) -o heat(A, V), {B, W | !edge(A, B, W) | neighborchanged(B, A, V / float(T), O / float(T), fabs(((V * W) / float(T)) - ((O * W) / float(T))))}.

delta(A, Plus, Minus),
heat(A, V),
count(A, C),
acc(A, Diff, T),
!inbound(A, X),
Diff > epsilon
   -o heatchanged(A, V, Plus - Minus), heat(A, V + Plus - Minus), count(A, C + 1), delta(A, 0.0, 0.0), acc(A, 0.0, 0).

